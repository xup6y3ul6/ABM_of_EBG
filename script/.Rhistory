<<<<<<< HEAD
df1 %>% inner_join(df2)
ebg_012 <- read.csv("data/012_b_1114_1_1_p2.csv",
fileEncoding = "UTF-8")
ebg_g1 <- ebg_011 %>%
left_join(ebg_012)
DT::datatable(ebg_g1,
options = list(scrollX = TRUE,
fixedColumns = TRUE))
student
student_long <- pivot_longer(student,
cols = c("math", "chinese", "psychology"), # -ID
names_to = "subjects", values_to = "score")
student_long
student_wide <- pivot_wider(student_long,
names_from = "subjects", values_from = "score")
student_wide
ebg_long <- ebg_g1 %>%
pivot_longer(
cols = c("p1Cash":"p1TotalAsset", "p2Cash":"p2TotalAsset"),
names_to = "money", values_to = "value")
DT::datatable(ebg_long,
options = list(scrollX = TRUE,
fixedColumns = TRUE))
boxplot(value ~ money, data = ebg_long)
DT::datatable(mtcars,
option = list(scrollX = TRUE,
fixedColumns = TRUE))
ggplot(mtcars, aes(x = mpg))
ggplot(mtcars, aes(x = mpg)) +
geom_histogram()
ggplot(mtcars, aes(x = mpg/length(mpg))) +
geom_histogram(fill = "cornflowerblue") + geom_density(color = "tomato")
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
(g <- ggplot(mtcars, aes(x = wt, y = mpg,
color = factor(am), shape = factor(am))) +
geom_point())
g + facet_wrap(~cyl)
(g1 <- g + stat_smooth(method = "loess"))
(g1 <- g + stat_smooth(method = "lm"))
ebg_011 <- read.csv("data/011_b_1114_1_1_p1.csv",
fileEncoding = "UTF-8")
head(ebg_011)
class(ebg_011)
student_long <- pivot_longer(student,
cols = c("math", "chinese", "psychology"), # -ID
names_to = "subjects", values_to = "score")
student_long
student_long <- pivot_longer(student,
cols = math:psychology, # -ID
names_to = "subjects", values_to = "score")
student_long
student_long <- pivot_longer(student,
cols = -ID
names_to = "subjects", values_to = "score")
student_long <- pivot_longer(student,
cols = - ID
names_to = "subjects", values_to = "score")
student_long <- pivot_longer(student,
cols = - ID,
names_to = "subjects", values_to = "score")
student_long
ebg_g1 %>%
filter(Trials >= 21, Trials < 60) %>%
pivot_longer(cols = c("p1Cash", "p2Cash"),
names_to = "player", values_to = "cash") %>%
ggplot(aes(x = Trials, y = cash,
linetype = player)) + #<<
geom_line()
ebg_g1 %>%
filter(Trials >= 21, Trials < 60) %>%
pivot_longer(cols = c("p1Cash", "p2Cash"),
names_to = "player", values_to = "cash") %>%
ggplot(aes(x = Trials, y = cash
)) + #<<
geom_line()
ebg_g1 %>%
filter(Trials >= 21, Trials < 60) %>%
pivot_longer(cols = c("p1Cash", "p2Cash"),
names_to = "player", values_to = "cash") %>%
ggplot(aes(x = Trials, y = cash,
group = player, linetype = player)) + #<<
geom_line()
qt(0.025, 8)
qt(1-0.05, 8)
qt(1-0.025, 8)
pt(2.048, 7)
qt(1-0.025, 7)
qt(1-0.05, 7)
qt(1-0.05, 14)
qt(1-0.025, 14)
qf(0.95, 2, 12)
qf(0.95, 2, 8)
qf(0.95, 4, 8)
Moore
car::More
car::Moore
carData::Moore
sessionInfo()
library(tidyr)
sessionInfo
sessionInfo()
help(gather)
update.packages("tidyr")
install.packages("tidyr")
library(tidyr)
gather(iris)
library(car)
Moore
moore_aov <- aov(fscore~partner.status*conformity, moore)
moore_aov <- aov(fscore~partner.status*conformity, Moore)
Anova(moore_aov, type = "III")
boxplot(conformity~fcategory,Moore)
boxplot(conformity~partner.status,Moore)
Moore$fcategory
moore_aov <- aov(conformity~partner.status*fscore, Moore)
Anova(moore_aov, type = "III")
moore_aov <- aov(conformity~partner.status*fscore, Moore)
anova(moore_aov)
str(moore)
str(Moore)
moore_aov <- aov(conformity~partner.status*fcategory, Moore)
Anova(moore_aov)
Anova(moore_aov, type = "III")
install.packages("R6")
f1 <- function(x) x
f2 <- function(x) invisible(x)
f1(1)  # prints
f2(1)  # does not
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
invisible(self)
}
))
library(R5)
library(R6)
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
invisible(self)
}
))
nick <- Person$new()
nick
nick <- Person$new(name = "nick", age = "25")
nick
nick$print()
nick$age
nick$age <- 100
nick
nick
nick$print()
moore.f.high <- filter(Moore, fcategory == "high")
moore.f.medium <- filter(Moore, fcategory == "medium")
Moore
class(Moore)
library(tidyverse)
git add .
sessionInfo
sessionInfo()
git checkout -b cat
926/9
*19
926/9*15
setwd("C:/Users/Nick Lin/Desktop/tmp/ABM_of_EBG")
playgame <- function(times, p1type, p2type){
Market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:Market$total) {
P1$decide()
P2$decide()
if(i <= 20){
Market$condition("Balance")
} else if (i <= 60){
Market$condition("Bubble")
} else {
Market$condition("Burst")
}
Market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(Market$price)
return(data)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
source('class1.R', echo=TRUE)     # source
setwd("C:/Users/Nick Lin/Desktop/tmp/ABM_of_EBG/script")
source('class1.R', echo=TRUE)     # source
playgame <- function(times, p1type, p2type){
Market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:Market$total) {
P1$decide()
P2$decide()
if(i <= 20){
Market$condition("Balance")
} else if (i <= 60){
Market$condition("Bubble")
} else {
Market$condition("Burst")
}
Market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(Market$price)
return(data)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
Market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10,"Hedge",100)   #P1
P2 <- Player$new(10000,10,"Hedge",100)  #P2
for (i in 1:Market$total) {
P1$decide()
P2$decide()
if(i <= 20){
Market$condition("Balance")
} else if (i <= 60){
Market$condition("Bubble")
} else {
Market$condition("Burst")
}
Market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
HH <- lapply(1, playgame, p1type = "Hedge", p2type = "Hedge")
HH <- lapply(1, playgame, p1type = "Hedge", p2type = "Hedge")
Market <- Market$new(total = 100) # Market
Market <- Market$new(total = 100) # Market
Market <- Market$new(total = 100) # Market
View(Market)
playgame <- function(times, p1type, p2type){
Market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:Market$total) {
P1$decide()
P2$decide()
if(i <= 20){
Market$condition("Balance")
} else if (i <= 60){
Market$condition("Bubble")
} else {
Market$condition("Burst")
}
Market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(Market$price)
return(data)
rm(Market, P1, P2)
}
HH <- lapply(1, playgame, p1type = "Hedge", p2type = "Hedge")
Market <- Market$new(total = 100) # Market
rm(Market, P1, P2)
Market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10,"Hedge",100)   #P1
P2 <- Player$new(10000,10,"Hedge",100)  #P2
market <- Market$new(total = 100) # Market
source('class1.R', echo=TRUE)     # source
market <- Market$new(total = 100) # Market
market <- Market$new(total = 100) # Market
playgame <- function(times, p1type, p2type){
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:Market$total) {
P1$decide()
P2$decide()
if(i <= 20){
Market$condition("Balance")
} else if (i <= 60){
Market$condition("Bubble")
} else {
Market$condition("Burst")
}
Market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(Market$price)
return(data)
rm(Market, P1, P2)
}
HH <- lapply(1, playgame, p1type = "Hedge", p2type = "Hedge")
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
playgame <- function(times, p1type, p2type){
market <- market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:market$total) {
P1$decide()
P2$decide()
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(market$price)
return(data)
rm(market, P1, P2)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
market <- market$new(total = 100) # Market
market <- market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
market <- market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
playgame <- function(times, p1type, p2type){
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:market$total) {
P1$decide()
P2$decide()
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(market$price)
return(data)
rm(market, P1, P2)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10,"Hedge",100)   #P1
P2 <- Player$new(10000,10,"Hedge",100)  #P2
for (i in 1:market$total) {
P1$decide()
P2$decide()
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
playgame <- function(times, p1type, p2type){
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:market$total) {
P1$decide()
P2$decide()
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(market$price)
return(data)
rm(market, P1, P2)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
Market$trial
Market$price
market
market$trial
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
source('class1.R', echo=TRUE)     # source
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10,"Hedge",100)   #P1
P2 <- Player$new(10000,10,"Hedge",100)  #P2
for (i in 1:market$total) {
P1$decide()
P2$decide()
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
for (i in 1:market$total) {
P1$decide(market)
P2$decide(market)
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
source('class1.R', echo=TRUE)     # source
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10,"Hedge",100)   #P1
P2 <- Player$new(10000,10,"Hedge",100)  #P2
for (i in 1:market$total) {
P1$decide(market)
P2$decide(market)
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending(market)
P2$ending(market)
}
#
cash <- data.frame(rep(1:101),P1$cash, P2$cash)
asset <- data.frame(rep(1:101),P1$asset, P2$asset)
playgame <- function(times, p1type, p2type){
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:market$total) {
P1$decide(market)
P2$decide(market)
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending()
P2$ending()
}
data <- list(market$price)
return(data)
rm(market, P1, P2)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
P2$ending(market)
playgame <- function(times, p1type, p2type){
market <- Market$new(total = 100) # Market
P1 <- Player$new(10000,10, p1type,100)   #P1
P2 <- Player$new(10000,10, p2type,100)  #P2
for (i in 1:market$total) {
P1$decide(market)
P2$decide(market)
if(i <= 20){
market$condition("Balance")
} else if (i <= 60){
market$condition("Bubble")
} else {
market$condition("Burst")
}
market$game(P1$decision[i],P2$decision[i])
P1$ending(market)
P2$ending(market)
}
data <- list(market$price)
return(data)
rm(market, P1, P2)
}
HH <- lapply(1:2, playgame, p1type = "Hedge", p2type = "Hedge")
HH
HHprice <- sapply(HH, "[[", 1)
HHprice
=======
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decision <- sapply(Hedge_Hedge, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Price <- sapply(Hedge_Hedge, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dprice <- sapply(Hedge_Hedge, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cash <- sapply(Hedge_Hedge, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cash <- sapply(Hedge_Hedge, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stock <- sapply(Hedge_Hedge, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stock <- sapply(Hedge_Hedge, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Value <- sapply(Hedge_Hedge, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Value <- sapply(Hedge_Hedge, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Asset <- sapply(Hedge_Hedge, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Asset <- sapply(Hedge_Hedge, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decision <- sapply(Hedge_Hedge, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decision <- sapply(Hedge_Hedge, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
thing <- list("Price", "Dprice", "P1cash", "P2cash", "P1stock", "P2stock", "P1value", "P2value", "P1asset", "P2asset", "P1decision", "P2decision")
View(thing)
thing <- c("Price", "Dprice", "P1cash", "P2cash", "P1stock", "P2stock", "P1value", "P2value", "P1asset", "P2asset", "P1decision", "P2decision")
thing <- c("Price", "Dprice", "P1cash", "P2cash", "P1stock", "P2stock",
"P1value", "P2value", "P1asset", "P2asset", "P1decision", "P2decision")
for (i in 1:10) {
thing[i] <- sapply(Hedge_Hedge, "[[", i) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
}
thing <- c(Price, Dprice, P1cash, P2cash, P1stock, "P2stock",
"P1value", "P2value", "P1asset", "P2asset", "P1decision", "P2decision")
Price <- sapply(Hedge_Hedge, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Hedge_Inversive
## Hedge-Hedge
```{r}
Pricehehe <- sapply(Hedge_Hedge, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dpricehehe <- sapply(Hedge_Hedge, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cashhehe <- sapply(Hedge_Hedge, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cashhehe <- sapply(Hedge_Hedge, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stockhehe <- sapply(Hedge_Hedge, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stockhehe <- sapply(Hedge_Hedge, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Valuehehe <- sapply(Hedge_Hedge, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Valuehehe <- sapply(Hedge_Hedge, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Assethehe <- sapply(Hedge_Hedge, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Assethehe <- sapply(Hedge_Hedge, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decisionhehe <- sapply(Hedge_Hedge, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decisionhehe <- sapply(Hedge_Hedge, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
```
## Hedge-Herd
```{r}
Pricehehd <- sapply(Hedge_Herd, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dpricehehd <- sapply(Hedge_Herd, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cashhehd <- sapply(Hedge_Herd, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cashhehd <- sapply(Hedge_Herd, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stockhehd <- sapply(Hedge_Herd, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stockhehd <- sapply(Hedge_Herd, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Valuehehd <- sapply(Hedge_Herd, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Valuehehd <- sapply(Hedge_Herd, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Assethehd <- sapply(Hedge_Herd, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Assethehd <- sapply(Hedge_Herd, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decisionhehd <- sapply(Hedge_Herd, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decisionhehd <- sapply(Hedge_Herd, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
```
## Hedge-Inversive
```{r}
Pricehei <- sapply(Hedge_Inversive, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dpricehei <- sapply(Hedge_Inversive, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cashhei <- sapply(Hedge_Inversive, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cashhei <- sapply(Hedge_Inversive, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stockhei <- sapply(Hedge_Inversive, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stockhei <- sapply(Hedge_Inversive, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Valuehei <- sapply(Hedge_Inversive, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Valuehei <- sapply(Hedge_Inversive, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Assethei <- sapply(Hedge_Inversive, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Assethei <- sapply(Hedge_Inversive, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decisionhei <- sapply(Hedge_Inversive, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decisionhei <- sapply(Hedge_Inversive, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
```
## Herd-Herd
```{r}
Pricehdhd <- sapply(Herd_Herd, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dpricehdhd <- sapply(Herd_Herd, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cashhdhd <- sapply(Herd_Herd, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cashhdhd <- sapply(Herd_Herd, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stockhdhd <- sapply(Herd_Herd, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stockhdhd <- sapply(Herd_Herd, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Valuehdhd <- sapply(Herd_Herd, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Valuehdhd <- sapply(Herd_Herd, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Assethdhd <- sapply(Herd_Herd, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Assethdhd <- sapply(Herd_Herd, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decisionhdhd <- sapply(Herd_Herd, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decisionhdhd <- sapply(Herd_Herd, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
```
## Herd-Inversive
```{r}
Pricehdi <- sapply(Herd_Inversive, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dpricehdi <- sapply(Herd_Inversive, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cashhdi <- sapply(Herd_Inversive, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cashhdi <- sapply(Herd_Inversive, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stockhdi <- sapply(Herd_Inversive, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stockhdi <- sapply(Herd_Inversive, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Valuehdi <- sapply(Herd_Inversive, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Valuehdi <- sapply(Herd_Inversive, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Assethdi <- sapply(Herd_Inversive, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Assethdi <- sapply(Herd_Inversive, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decisionhdi <- sapply(Herd_Inversive, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decisionhdi <- sapply(Herd_Inversive, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
```
## Inversive-Inversive
```{r}
Priceii <- sapply(Inversive_Inversive, "[[", 1) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
Dpriceii <- sapply(Inversive_Inversive, "[[", 2) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Cashii <- sapply(Inversive_Inversive, "[[", 3) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Cashii <- sapply(Inversive_Inversive, "[[", 4) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Stockii <- sapply(Inversive_Inversive, "[[", 5) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Stockii <- sapply(Inversive_Inversive, "[[", 6) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Valueii <- sapply(Inversive_Inversive, "[[", 7) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Valueii <- sapply(Inversive_Inversive, "[[", 8) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Assetii <- sapply(Inversive_Inversive, "[[", 9) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Assetii <- sapply(Inversive_Inversive, "[[", 10) %>%
data.frame() %>%
add_column(trial = 1:101) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P1Decisionii <- sapply(Inversive_Inversive, "[[", 11) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
P2Decisionii <- sapply(Inversive_Inversive, "[[", 12) %>%
data.frame() %>%
add_column(trial = 1:100) %>%
pivot_longer(-trial, names_to = "sim_times", values_to = "value")
```
# Plot
## Price
```{r}
hehep <- ggplot(Pricehehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hehdp <- ggplot(Pricehehd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
heip <- ggplot(Priceheip, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hdhdp <- ggplot(Pricehdhdp, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hdip <- ggplot(Pricehdip, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
iip <- ggplot(Priceiip, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hehep <- ggplot(Pricehehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hehdp <- ggplot(Pricehehd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
heip <- ggplot(Pricehei, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hdhdp <- ggplot(Pricehdhd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
hdip <- ggplot(Pricehdi, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
iip <- ggplot(Priceii, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
theme_classic()
ggplotly(pp)
grid.arrange(hehep, hehdp, heip, hehdp, hdip, iip, nrow = 3)
install.packages("gridExtra")
# install.packages("gridExtra")
library(gridExtra)
grid.arrange(hehep, hehdp, heip, hehdp, hdip, iip, nrow = 3)
?ggplot
hehep <- ggplot(Pricehehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Hedge", y = "Cash")
hehep <- ggplot(Pricehehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Hedge", y = "Cash") +
theme_classic()
hehep
hehep <- ggplot(Pricehehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Hedge", y = "Cash") +
theme_classic()
hehdp <- ggplot(Pricehehd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Herd", y = "Cash") +
theme_classic()
heip <- ggplot(Pricehei, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Inversive", y = "Cash") +
theme_classic()
hdhdp <- ggplot(Pricehdhd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Herd_Herd", y = "Cash") +
theme_classic()
hdip <- ggplot(Pricehdi, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Herd_Inversive", y = "Cash") +
theme_classic()
iip <- ggplot(Priceii, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Inversive_Inversive", y = "Cash") +
theme_classic()
grid.arrange(hehep, hehdp, heip, hehdp, hdip, iip, nrow = 3)
# install.packages("gridExtra")
# library(gridExtra)
hehed <- ggplot(Dpricehehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Hedge", y = "Cash") +
theme_classic()
hehdd <- ggplot(Dpricehehd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Herd", y = "Cash") +
theme_classic()
heid <- ggplot(Dpricehei, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Inversive", y = "Cash") +
theme_classic()
hdhdd <- ggplot(Dpricehdhd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Herd_Herd", y = "Cash") +
theme_classic()
hdid <- ggplot(Dpricehdi, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Herd_Inversive", y = "Cash") +
theme_classic()
iid <- ggplot(Dpriceii, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Inversive_Inversive", y = "Cash") +
theme_classic()
grid.arrange(hehed, hehdd, heid, hehdd, hdid, iid, nrow = 3)
hehec1 <- ggplot(P1Cashhehe, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Hedge", y = "P1Cash") +
theme_classic()
hehdc1 <- ggplot(P1Cashhehd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Herd", y = "P1Cash") +
theme_classic()
heic1 <- ggplot(P1Cashhei, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Hedge_Inversive", y = "P1Cash") +
theme_classic()
hdhdc1 <- ggplot(P1Cashhdhd, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Herd_Herd", y = "P1Cash") +
theme_classic()
hdic1 <- ggplot(P1Cashhdi, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Herd_Inversive", y = "P1Cash") +
theme_classic()
iic1 <- ggplot(P1Cashii, aes(x = trial, y = value, group = sim_times)) +
geom_line(color = "grey") +
labs(x = "Inversive_Inversive", y = "P1Cash") +
theme_classic()
grid.arrange(hehec1, hehdc1, heic1, hehdc1, hdic1, iic1, nrow = 3)
View(P2Asset)
grid.arrange(hehed, hehdd, heid, hehdd, hdid, iid, nrow = 3)
>>>>>>> efe7bdd891e042137a473fe8abf150f12831c681
